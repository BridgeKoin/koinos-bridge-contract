syntax = "proto3";
package bridge;
import "koinos/options.proto";

// Objects
message repeated_addresses {
  repeated bytes addresses = 1 [(koinos.btype) = ADDRESS];
}

message metadata_object {
  bool initialized = 1; 
  uint64 nonce = 2 [jstype = JS_STRING];
  uint32 chain_id = 3;
  uint32 nb_validators = 4;
}

message empty_object {}

message boole {
  bool value = 1;
}

message fees_object {
  uint64 value = 2 [jstype = JS_STRING];
  uint64 balance = 3 [jstype = JS_STRING];
}

// Entrypoints

// @description Initialize contract
// @read-only false
// @result empty_object
message initialize_arguments {
  uint32 chain_id = 1;
  repeated bytes initial_validators = 2 [(koinos.btype) = ADDRESS];
}

// @description Get validators
// @read-only true
// @result repeated_addresses
message get_validators_arguments {
  bytes start = 1 [(koinos.btype) = ADDRESS];
  int32 limit = 2;
  bool descending = 3;
}

// @description Get supported tokens
// @read-only true
// @result repeated_addresses
message get_supported_tokens_arguments {
  bytes start = 1 [(koinos.btype) = ADDRESS];
  int32 limit = 2;
  bool descending = 3;
}

// @description Get fee of tokens
// @read-only true
// @result fees_object
message get_fee_token_arguments {
  bytes token = 1 [(koinos.btype) = ADDRESS];
}

// @description Get supported wrapped tokens
// @read-only true
// @result repeated_addresses
message get_supported_wrapped_tokens_arguments {
  bytes start = 1 [(koinos.btype) = ADDRESS];
  int32 limit = 2;
  bool descending = 3;
}

// @description Get fee of wrapped tokens
// @read-only true
// @result fees_object
message get_fee_wrapped_token_arguments {
  bytes token = 1 [(koinos.btype) = ADDRESS];
}

// @description Get metadata
// @read-only true
// @result metadata_object
message get_metadata_arguments {
}

// @description Pause/Unpause bridge
// @read-only false
// @result empty_object
message set_pause_arguments {
  repeated bytes signatures = 1;
  bool pause = 2;
  uint64 expiration = 3 [jstype = JS_STRING];
}

// @description Transfer tokens
// @read-only false
// @result empty_object
message transfer_tokens_arguments {
  bytes from = 1 [(koinos.btype) = ADDRESS];
  bytes token = 2 [(koinos.btype) = CONTRACT_ID];
  uint64 amount = 3 [jstype = JS_STRING];
  uint64 payment = 4 [jstype = JS_STRING];
  string relayer = 5;
  string recipient = 6;
  uint32 to_chain = 7;
}

// @description Complete a bridge transfer
// @read-only false
// @result empty_object
message complete_transfer_arguments {
  bytes transaction_id = 1 [(koinos.btype) = TRANSACTION_ID];
  bytes token = 2 [(koinos.btype) = CONTRACT_ID];
  bytes relayer = 3 [(koinos.btype) = ADDRESS];
  bytes recipient = 4 [(koinos.btype) = ADDRESS];
  uint64 value = 5 [jstype = JS_STRING];
  uint64 payment = 6 [jstype = JS_STRING];
  repeated bytes signatures = 7;
  uint64 expiration = 8 [jstype = JS_STRING];
}

// @description Add a new validator
// @read-only false
// @result empty_object
message add_validator_arguments {
  repeated bytes signatures = 1;
  bytes validator = 2 [(koinos.btype) = ADDRESS];
  uint64 expiration = 3 [jstype = JS_STRING];
}

// @description Remove an existing validator
// @read-only false
// @result empty_object
message remove_validator_arguments {
  repeated bytes signatures = 1;
  bytes validator = 2 [(koinos.btype) = ADDRESS];
  uint64 expiration = 3 [jstype = JS_STRING];
}

// @description Add support for a new token
// @read-only false
// @result empty_object
message add_supported_token_arguments {
  repeated bytes signatures = 1;
  bytes token = 2 [(koinos.btype) = CONTRACT_ID];
  uint64 expiration = 3 [jstype = JS_STRING];
}

// @description set fee for a token
// @read-only false
// @result empty_object
message set_fee_token_arguments {
  repeated bytes signatures = 1;
  bytes token = 2 [(koinos.btype) = CONTRACT_ID];
  uint64 fee = 3 [jstype = JS_STRING];
  uint64 expiration = 4 [jstype = JS_STRING];
}

// @description claim fee for a token
// @read-only false
// @result empty_object
message claim_fee_token_arguments {
  repeated bytes signatures = 1;
  bytes token = 2 [(koinos.btype) = CONTRACT_ID];
  bytes wallet = 3 [(koinos.btype) = CONTRACT_ID];
  uint64 expiration = 4 [jstype = JS_STRING];
}

// @description Remove an existing supported token
// @read-only false
// @result empty_object
message remove_supported_token_arguments {
  repeated bytes signatures = 1;
  bytes token = 2 [(koinos.btype) = CONTRACT_ID];
  uint64 expiration = 3 [jstype = JS_STRING];
}

// @description Add support for a new wrapped token
// @read-only false
// @result empty_object
message add_supported_wrapped_token_arguments {
  repeated bytes signatures = 1;
  bytes token = 2 [(koinos.btype) = CONTRACT_ID];
  uint64 expiration = 3 [jstype = JS_STRING];
}

// @description Remove an existing supported token
// @read-only false
// @result empty_object
message remove_supported_wrapped_token_arguments {
  repeated bytes signatures = 1;
  bytes token = 2 [(koinos.btype) = CONTRACT_ID];
  uint64 expiration = 3 [jstype = JS_STRING];
}

// @description set fee for a wrapped token
// @read-only false
// @result empty_object
message set_fee_wrapped_token_arguments {
  repeated bytes signatures = 1;
  bytes token = 2 [(koinos.btype) = CONTRACT_ID];
  uint64 fee = 3 [jstype = JS_STRING];
  uint64 expiration = 4 [jstype = JS_STRING];
}

// @description claim fee for a wrapped token
// @read-only false
// @result empty_object
message claim_fee_wrapped_token_arguments {
  repeated bytes signatures = 1;
  bytes token = 2 [(koinos.btype) = CONTRACT_ID];
  bytes wallet = 3 [(koinos.btype) = CONTRACT_ID];
  uint64 expiration = 4 [jstype = JS_STRING];
}

// @description Request new signatures when old ones expired
// @read-only false
// @result empty_object
message request_new_signatures_arguments {
  string transaction_id = 1;
  string operation_id = 2;
}

// @description Get transfer status
// @read-only true
// @result boole
message get_transfer_status_arguments {
  bytes transaction_id = 1 [(koinos.btype) = TRANSACTION_ID];
}

// Events
message tokens_locked_event {
  bytes from = 1 [(koinos.btype) = ADDRESS];
  bytes token = 2 [(koinos.btype) = CONTRACT_ID];
  string amount = 3;
  string payment = 4;
  string relayer = 5;
  string recipient = 6;
  uint32 chain_id = 7;
}

message transfer_completed_event {
  bytes tx_id = 1 [(koinos.btype) = TRANSACTION_ID];
}

// Hash
enum action_id {
  reserved_action = 0;
  add_validator = 1;
  remove_validator = 2;
  add_supported_token = 3;
  remove_supported_token = 4;
  add_supported_wrapped_token = 5;
  remove_supported_wrapped_token = 6;
  set_pause = 7;
  complete_transfer = 8;
  set_fee_token = 9;
  set_fee_wrapped_token = 10;
  claim_fee_token = 11;
  claim_fee_wrapped_token = 12;
}


message add_remove_action_hash {
  action_id action = 1;
  bytes address = 2;
  uint64 nonce = 3 [jstype = JS_STRING];
  bytes contract_id = 4;
  uint64 expiration = 5 [jstype = JS_STRING];
  uint32 chain = 6;
}

message set_pause_action_hash {
  action_id action = 1;
  bool pause = 2;
  uint64 nonce = 3 [jstype = JS_STRING];
  bytes contract_id = 4;
  uint64 expiration = 5 [jstype = JS_STRING];
  uint32 chain = 6;
}

message complete_transfer_hash {
  action_id action = 1;
  bytes transaction_id = 2;
  bytes token = 3;
  bytes recipient = 4;
  bytes relayer = 5;
  uint64 amount = 6 [jstype = JS_STRING];
  uint64 payment = 7 [jstype = JS_STRING];
  bytes contract_id = 8;
  uint64 expiration = 9 [jstype = JS_STRING];
  uint32 chain = 10;
}

message set_fee_hash {
  action_id action = 1;
  bytes token = 2;
  uint64 fee = 3 [jstype = JS_STRING];
  uint64 nonce = 4 [jstype = JS_STRING];
  bytes contract_id = 5;
  uint64 expiration = 6 [jstype = JS_STRING];
  uint32 chain = 7;
}

message claim_fee_hash {
  action_id action = 1;
  bytes token = 2;
  bytes wallet = 3;
  uint64 nonce = 4 [jstype = JS_STRING];
  bytes contract_id = 5
  uint64 expiration = 6 [jstype = JS_STRING];
  uint32 chain = 7;
}