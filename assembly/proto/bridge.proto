syntax = "proto3";

package bridge;

import "koinos/options.proto"; 

// Entrypoints

// @description Initialize contract
// @read-only false
// @result empty_object
message initialize_arguments {
  repeated bytes initial_validators = 1 [(koinos.btype) = ADDRESS];
}

// @description Get validators
// @read-only true
// @result repeated_addresses
message get_validators_arguments {
  bytes start = 1 [(koinos.btype) = ADDRESS];
  int32 limit = 2;
  bool descending = 3;
}

// @description Get supported tokens
// @read-only true
// @result repeated_addresses
message get_supported_tokens_arguments {
  bytes start = 1 [(koinos.btype) = ADDRESS];
  int32 limit = 2;
  bool descending = 3;
}

// @description Get supported wrapped tokens
// @read-only true
// @result repeated_addresses
message get_supported_wrapped_tokens_arguments {
  bytes start = 1 [(koinos.btype) = ADDRESS];
  int32 limit = 2;
  bool descending = 3;
}

message repeated_addresses {
  repeated bytes addresses = 1 [(koinos.btype) = ADDRESS];
}

// @description Get metadata
// @read-only true
// @result metadata_object
message get_metadata_arguments {
}

// @description Pause/Unpause bridge
// @read-only false
// @result empty_object
message set_pause_arguments {
  repeated bytes signatures = 1;
  bool pause = 2;
  uint64 expiration = 3 [jstype = JS_STRING];
}

// @description Transfer tokens
// @read-only false
// @result empty_object
message transfer_tokens_arguments {
  bytes from = 1 [(koinos.btype) = ADDRESS];
  bytes token = 2 [(koinos.btype) = CONTRACT_ID];
  uint64 amount = 3 [jstype = JS_STRING];
  string recipient = 4;
}

// @description Complete a bridge transfer
// @read-only false
// @result empty_object
message complete_transfer_arguments {
  bytes transaction_id = 1 [(koinos.btype) = TRANSACTION_ID];
  bytes token = 2 [(koinos.btype) = CONTRACT_ID];
  bytes recipient = 3 [(koinos.btype) = ADDRESS];
  uint64 value = 4 [jstype = JS_STRING];
  repeated bytes signatures = 6;
  uint64 expiration = 7 [jstype = JS_STRING];
}

// @description Add a new validator
// @read-only false
// @result empty_object
message add_validator_arguments {
  repeated bytes signatures = 1;
  bytes validator = 2 [(koinos.btype) = ADDRESS];
  uint64 expiration = 3 [jstype = JS_STRING];
}

// @description Remove an existing validator
// @read-only false
// @result empty_object
message remove_validator_arguments {
  repeated bytes signatures = 1;
  bytes validator = 2 [(koinos.btype) = ADDRESS];
  uint64 expiration = 3 [jstype = JS_STRING];
}

// @description Add support for a new token
// @read-only false
// @result empty_object
message add_supported_token_arguments {
  repeated bytes signatures = 1;
  bytes token = 2 [(koinos.btype) = CONTRACT_ID];
  uint64 expiration = 3 [jstype = JS_STRING];
}
// @description Remove an existing supported token
// @read-only false
// @result empty_object
message remove_supported_token_arguments {
  repeated bytes signatures = 1;
  bytes token = 2 [(koinos.btype) = CONTRACT_ID];
  uint64 expiration = 3 [jstype = JS_STRING];
}

// @description Add support for a new wrapped token
// @read-only false
// @result empty_object
message add_supported_wrapped_token_arguments {
  repeated bytes signatures = 1;
  bytes token = 2 [(koinos.btype) = CONTRACT_ID];
  uint64 expiration = 3 [jstype = JS_STRING];
}

// @description Remove an existing supported token
// @read-only false
// @result empty_object
message remove_supported_wrapped_token_arguments {
  repeated bytes signatures = 1;
  bytes token = 2 [(koinos.btype) = CONTRACT_ID];
  uint64 expiration = 3 [jstype = JS_STRING];
}

// @description Remove an existing supported token
// @read-only false
// @result empty_object
message set_fee_wallet_arguments {
  repeated bytes signatures = 1;
  bytes fee_to = 2 [(koinos.btype) = ADDRESS];
  uint64 fee_amount = 3 [jstype = JS_STRING];
  uint64 expiration = 4 [jstype = JS_STRING];
}

// @description Request new signatures when old ones expired
// @read-only false
// @result empty_object
message request_new_signatures_arguments {
  string transaction_id = 1;
  string operation_id = 2;
}

// @description Get transfer status
// @read-only true
message get_transfer_status_arguments {
  bytes transaction_id = 1 [(koinos.btype) = TRANSACTION_ID];
}

message get_transfer_status_result{
  bool value = 1;
}

// Events
message tokens_locked_event {
  bytes from = 1 [(koinos.btype) = ADDRESS];
  bytes token = 2 [(koinos.btype) = CONTRACT_ID];
  string amount = 3;
  string recipient = 4;
}

message transfer_completed_event {
  bytes tx_id = 1 [(koinos.btype) = TRANSACTION_ID];
}

enum action_id {
  reserved_action = 0;
  add_validator = 1;
  remove_validator = 2;
  add_supported_token = 3;
  remove_supported_token = 4;
  add_supported_wrapped_token = 5;
  remove_supported_wrapped_token = 6;
  set_pause = 7;
  complete_transfer = 8;
  set_fee_wallet = 9;
}

// Objects
message add_remove_action_hash {
  action_id action = 1;
  bytes address = 2;
  uint64 nonce = 3;
  bytes contract_id = 4;
  uint64 expiration = 5;
}

message set_pause_action_hash {
  action_id action = 1;
  bool pause = 2;
  uint64 nonce = 3;
  bytes contract_id = 4;
  uint64 expiration = 5;
}

message complete_transfer_hash {
  action_id action = 1;
  bytes transaction_id = 2;
  bytes token = 3;
  bytes recipient = 4;
  uint64 amount = 5;
  bytes contract_id = 6;
  uint64 expiration = 7;
}

message set_fee_wallet_hash {
  action_id action = 1;
  uint64 fee_amount = 2;
  bytes fee_to = 3 [(koinos.btype) = ADDRESS];
  uint64 expiration = 4;
}

message metadata_object {
  bool initialized = 1; 
  uint64 nonce = 2 [jstype = JS_STRING];
  uint32 nb_validators = 3;
  uint64 fee_amount = 4;
  bytes fee_to = 5 [(koinos.btype) = ADDRESS];
}

message empty_object {

}